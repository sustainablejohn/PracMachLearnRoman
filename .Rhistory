install.packages('swirl')
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
install.packages("caret")
trainIndex = createDataPartition(diagnosis, p = 0.50)
library(caret)
trainIndex = createDataPartition(diagnosis, p = 0.50)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
plot(mixtures$CompressiveStrength)
qplot(mixtures$CompressiveStrength)
qplot(mixtures$CompressiveStrength, age)
qplot(mixtures$CompressiveStrength, mixtures$age)
qplot(mixtures$CompressiveStrength, geom="density")
install.packages("Hmisc")
plot(mixtures$CompressiveStrength)
qplot(training$CompressiveStrength,inTrain)
qplot(training$CompressiveStrength,inTrain, colour=training$Age)
qplot(training$CompressiveStrength,inTrain) + geom+smooth(method='lm', formula = y~x)
qplot(training$CompressiveStrength,inTrain) + geom_smooth(method='lm', formula = y~x)
qplot(training$CompressiveStrength,inTrain, colour=training$BlastFurnaceSlag)
qplot(training$CompressiveStrength,inTrain, colour=training$Water)
qplot(training$CompressiveStrength,inTrain, colour=training$FlyAsh)
qplot(inTrain,training$CompressiveStrength, colour=training$FlyAsh)
qplot(inTrain,training$CompressiveStrength, colour=training$Age)
qplot(inTrain,training$CompressiveStrength, colour=training$FlyAsh)
training$FlyAshCut <- cut2(training$FlyAsh, g=4)
library(Hmsic)
library(Hmisc)
training$FlyAshCut <- cut2(training$FlyAsh, g=4)
summary(training$FlyAshCut)
qplot(inTrain,training$CompressiveStrength, colour=training$FlyAshCut)
training$FlyAshCut <- cut2(training$FlyAsh, cuts=3)
summary(training$FlyAshCut)
training$FlyAshCut <- cut2(training$FlyAsh, g=4)
qplot(inTrain,training$CompressiveStrength, colour=training$FlyAshCut)
summary(mixtures)
qplot(inTrain,training$CompressiveStrength, colour=training$Water)
qplot(inTrain,training$CompressiveStrength, colour=training$BlastFurnaceSlag)
qplot(inTrain,training$CompressiveStrength, colour=training$CoarseAggregate)
qplot(inTrain,training$CompressiveStrength, colour=training$Age)
qplot(inTrain,training$CompressiveStrength, colour=training$FineAggregate)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(mixtures$Superplasticizer)
hist(mixtures$Superplasticizer)
mixtures$logSup <- log10(mixtures$Superplasticizer)
hist(mixtures$logSup)
summary(mixtures$logSup)
row_sub = apply(mixtures$Superplasticizer, 1, function(row) all(row !=0 ))
new <- mixtures$Superplasticizer[mixtures$Superplasticizer != 0]
summmary(new)
summary(new)
hist(new)
hist(mixtures$Superplasticizer)
hist(new)
hist(log10(new))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
colnames(training)
preProc <- preProcess(training[,58:69], method="pca", pcaComp=2)
preDict <- predict(preProc, training[,58:69])
plot(preDict[,1],preDict[,2])
smallTrain <- training[,58:69]
head(smallTrain)
prComp <- prcomp(smallTrain)
prComp
prComp$rotation
summary(prComp)
0.3523+0.2397+0.2190
0.3523+0.2397+0.2190+0.06157
0.3523+0.2397+0.2190+0.06157+0.04663
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newTraining <- data.frame(training[,58:69], diagnosis)
newTraining <- data.frame(training[,58:69], diagnosis[,inTrain])
diagnosis[,inTrain]
newTraining <- data.frame(training[,58:69], diagnosis[inTrain,])
newTraining <- data.frame(training[,58:69])
xx<- diagnosis[inTrain,]
head(training)
newTraining <- data.frame(training[,1],training[,58:69])
head(newTraining)
colname(newTraining)
colnames(newTraining)
colnames(newTraining[1,])
colnames(newTraining[,1])
colnames(newTraining[1])
newtraining[,1]
newTraining[,1]
model1 <- train(newTraining[,1] ~ .)
model1 <- train(newTraining[,1] ~ .,data=newTraining)
model1 <- train(newTraining[,1] ~ .,data=newTraining)
library(randomForest)
model1 <- train(newTraining[,1] ~ .,data=newTraining)
install.packages("e1071")
library(randomForest)
model1 <- train(newTraining[,1] ~ .,data=newTraining)
head(training[,1])
head(training)
newTraining <- data.frame(training[,58:69])
model1 <- train(training$diagnosis ~ .,data=newTraining)
model1 <- train(training$diagnosis ~ .,method="glm", preProcess="pca", data=newTraining)
preProc <- preProcess(training[,58:69], method="pca", pcaComp=5)
prComp <- prcomp(newTraining)
prComp
summary(prComp)
1 - 0.06157
1 - 0.06157 -0.2529
1 - 0.06157 -0.02529
1 - 0.06157 -0.02529-0.0144
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
newTraining <- data.frame(training[,58:69])
prComp <- prcomp(newTraining)
summary(prComp)
0.3778 + 0.2302
0.3778 + 0.2302 +0.05786
0.3778 + 0.2302 +0.05786 +0.04008
0.3778 + 0.2302 +0.05786 +0.04008 +0.02203
0.3778 + 0.2302 +0.05786 +0.04008 +0.02203+0.01475+0.01377+0.01025
preProc <- preProcess(training[,58:69], method="pca", pcaComp=2)
summary(preProc)
preProc
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.5, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data = training)
print(modFit$finalModel)
modFit
summary(modFit)
plot(modFit)
View(testing)
modFit <- train(Class ~ ., method="rpart", data = training)
print(modFit$finalModel)
printcp(modFit)
summary(modFit)
plot(modFit, uniform=TRUE)
modFit <- rpart(Class ~ ., method="class", data = training)
plot(modFit, uniform=TRUE)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
text(modFit, use.n=TRUE, all=TRUE, cex=.8)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
library(rpart)
install.packages("pgmm")
library(pgmm)
install.packages("ElemStatLearn")
library("ElemStatLearn")
modFit <- rpart(Class ~ ., method="class", data = training)
plot(modFit, uniform=TRUE)
text(modFit, use.n=TRUE, all=TRUE, cex=.8)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
data("segmentationOriginal")
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.5, list=FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
View(testing)
clear inTrain
data("segmentationOriginal")
View(segmentationOriginal)
inTrain <- createDataPartition(segmentationOriginal$Case=="Train")
inTrain
training <- segmentationOriginal[inTrain, ]
inTrain <- createDataPartition(segmentationOriginal$Case=="Train",p=1)
inTrain <- createDataPartition(segmentationOriginal$Case=="Train",p=1,list=FALSE)
training <- segmentationOriginal[inTrain, ]
inTrain <- createDataPartition(segmentationOriginal$Case=="Train",list=FALSE)
training <- segmentationOriginal[inTrain, ]
View(training)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
View(training)
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
View(training)
fit <- rpart(Class ~., method="class", data = training)
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
data("segmentationOriginal")
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
set.seed(125)
fit <- rpart(Class ~ ., method="class", data = training)
plot(fit, uniform=TRUE)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
predict(fit, newdata = testing)
newFit <- predict(fit, newdata = testing)
plot(newFit)
library(pgmm)
data(olive)
olive=olive[,-1]
fit2 <- rpart(Area ~ ., method="class", data = olive)
newdata <- as.data.frame(t(colMeans(olive)))
predict(fit2, newdata = newdata)
View(olive)
newdata
summary(olive$Area)
hist(olive$Area)
data(segmentationOriginal)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
fancyRpartPlot(model$finalModel)
install.packages("rattle")
library(rattle)
plot(model$finalModel)
text(model, use.n=TRUE, all=TRUE, cex=.8)
finalModel
model$finalModel
text(model$finalModel)
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(model$finalModel)
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(model$finalModel)
text(model$finalModel)
install.packages("RGtk2")
model$finalModel
library(pgmm)
data(olive)
olive=olive[,-1]
model<-train(Area ~ ., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit4<- train(y~.,data=vowel.train,method="rf")
install.packages("randomForest")
install.packages("randomForest")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit4<- train(y~.,data=vowel.train,method="rf")
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit4<- train(y~.,data=vowel.train,method="rf")
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit4<- train(y~.,data=vowel.train,method="rf")
result4<- predict(modelFit4,vowel.test)
varImp(modelFit4)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit4<- train(y~.,data=vowel.train,method="rf")
modelFit4<- train(y~.,data=vowel.train,method="rf")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
set.seed(33833)
modelFit4<- train(y~.,data=vowel.train,method="rf")
result4<- predict(modelFit4,vowel.test)
varImp(modelFit4)
varImp(result4)
result4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predName <- names(training)
ILpredictor <- predName[substr(predName, 1, 2) == "IL"]
ILpredictor
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA
summary(ProcPCA)
str(ProcPCA)
?preProcess
trainingIL <- training[, c(ILpredictor, "diagnosis")]
diagnosis
trainingIL2 <- training[, c(ILpredictor)]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
trainPC <- predict(preProc, training[, c(ILpredictor, "diagnosis"])
trainPC <- predict(preProc, training[, c(ILpredictor, "diagnosis")]
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
ILpredictor <- predName[substr(predName, 1, 2) == "IL"]
predName <- names(training)
ILpredictor <- predName[substr(predName, 1, 2) == "IL"]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
trainingIL$diagnosis
trainPC
trainingIL$diagnosis
trainPC <- predict(preProc, training[, c(ILpredictor, "diagnosis")])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
trainingData <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
getwd()
setwd("/home/susty/R/R projects/PracMachLearnRoman")
list.files()
trainingData <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "/home/susty/R/R projects/PracMachLearnRoman")
trainingData <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "/home/susty/R/R projects/PracMachLearnRoman/training.csv")
testingDownload <- download.gile("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "/home/susty/R/R projects/PracMachLearnRoman/testing.csv")
testingDownload <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "/home/susty/R/R projects/PracMachLearnRoman/testing.csv")
training <- read.csv("training.csv")
colnames(training)
testing <- read.csv("testing.csv")
summary(training$user_name)
summary(training$classe)
model<-train(classe ~ .,
data = training,
method = "rpart")
model<-train(classe ~ ., data = training, method = "rpart")
library(caret)
model <- train(classe ~ ., data = training, method = "rpart")
class(training$classe)
?train
model <- train(classe ~ ., data = training, method = "rpart", na.action = na.omit)
colnames(training)
M < abs(cor(training[,-160]))
M <- abs(cor(training[,-160]))
str(training)
summary(training$min_pitch_arm)
preTrain <- preProcess(training[,-160], method= c("center", "scale"))
summary(preTrain)
preTrain
